<!DOCTYPE html>
<html lang="en">
<head>
<title>Server</title>
<script src="JZZ.js"></script>
<script src="JZZ.input.Kbd.js"></script>
<script src="JZZ.midi.WS.js"></script>
<script src="JZZ.synth.Tiny.js"></script>
<style>
#midiin, #midiout { border: solid #ccc;}
.instr { background-color: #eee; margin: .2em; padding: .4em; border: solid #ddd;}
.off { color: #aaa;}
</style>
</head>
<body>
<h1>WS MIDI server</h1>
<p>Closing this page will stop the server...</p>
<h2>MIDI In:</h2>
<div id="midiin">
<div class="instr">
<div id="piano"></div>
<input type="checkbox" id="cb1" checked> Virtual Piano
</div>
</div>
<h2>MIDI Out:</h2>
<div id="midiout">
<div class="instr">
<input type="checkbox" id="cb2" checked> Web Audio
</div>
</div>
<h2>See also:</h2>
<ul>
<li><a href="/" target="_blank">Test client</a></li>
<li><a href="https://github.com/jazz-soft/WS-MIDI-Server" target="_blank">GitHub repository</a></li>
<li><a href="https://jazz-soft.net" target="_blank">Jazz-Soft.net</a></li>
</ul>
<script>
var synth = JZZ.synth.Tiny();
var piano = JZZ.input.Kbd({at: "piano"});
var synth = JZZ.synth.Tiny();
var inputs = {};
var outputs = {};
var cb1 = document.getElementById('cb1');
var cb2 = document.getElementById('cb2');
var midiin = document.getElementById('midiin');
var midiout = document.getElementById('midiout');

var master = webSocket = new WebSocket((window.location.protocol == 'https:' ? 'wss://' : 'ws://') + window.location.host + '/master');
master.onopen = function() { send({ refresh: true }); };
master.onmessage = function(evt) {
  var k, x;
  try {
    var data = JSON.parse(evt.data);
    if (data.info) {
      for (k of Object.keys(data.info.inputs)) if (!inputs[k]) inputs[k] = create(k, data.info.inputs[k], false);
      for (k of Object.keys(data.info.outputs)) if (!outputs[k]) outputs[k] = create(k, data.info.outputs[k], true);
      for (k of Object.keys(inputs)) update(inputs[k], data.info.inputs[k]);
      for (k of Object.keys(outputs)) update(outputs[k], data.info.outputs[k]);
    }
    else if (data.midi) synth.send(JZZ.WS.decode(data.midi));
  }
  catch (e) {console.log(e) /**/}
};
piano.connect(function(msg) { send({ midi: JZZ.WS.encode(msg) }); });
handle(cb1, 'Virtual Piano', false);
inputs['Virtual Piano'] = { div: midiin, cb: cb1 };
handle(cb2, 'Web Audio', true);
outputs['Web Audio'] = { div: midiout, cb: cb2 };

function send(x) { master.send(JSON.stringify(x)); }
function handle(cb, name, out) {
  cb.addEventListener('change', function() {
    var x = { name: name, hide: !this.checked };
    send(out ? { output: x } : { input: x });
  });
}
function create(name, x, out) {
  var div = document.createElement('div');
  var cb = document.createElement('input');
  cb.type = 'checkbox';
  cb.checked = !x.hide;
  div.className = 'instr';
  div.appendChild(cb);
  div.appendChild(document.createTextNode(' ' + name));
  (out ? midiout : midiin).appendChild(div);
  handle(cb, name, out);
  return { div: div, cb: cb };
}
function update(q, x) {
  if (!x || !x.open) {
    q.div.classList.add('off');
    q.cb.disabled = true;
    q.cb.checked = false;
  }
  else {
    q.div.classList.remove('off');
    q.cb.disabled = false;
    q.cb.checked = !x.hide;
  }
}
</script>
</body>
</html>